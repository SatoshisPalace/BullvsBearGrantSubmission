{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryResponse",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "contest"
      ],
      "properties": {
        "contest": {
          "$ref": "#/definitions/ContestQueryResponse"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "contests"
      ],
      "properties": {
        "contests": {
          "$ref": "#/definitions/ContestsQueryResponse"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "user_bet"
      ],
      "properties": {
        "user_bet": {
          "$ref": "#/definitions/UserBetQueryResponse"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Bet": {
      "type": "object",
      "required": [
        "amount",
        "has_been_paid",
        "outcome_id"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "has_been_paid": {
          "type": "boolean"
        },
        "outcome_id": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      }
    },
    "ContestBetSummary": {
      "type": "object",
      "required": [
        "options"
      ],
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionBetSummary"
          }
        },
        "outcome": {
          "anyOf": [
            {
              "$ref": "#/definitions/ContestOutcome"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ContestInfo": {
      "type": "object",
      "required": [
        "event_details",
        "id",
        "options",
        "time_of_close",
        "time_of_resolve"
      ],
      "properties": {
        "event_details": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContestOutcome"
          }
        },
        "time_of_close": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "time_of_resolve": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "ContestOutcome": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ContestQueryResponse": {
      "type": "object",
      "required": [
        "contest_bet_summary",
        "contest_info",
        "contest_winner"
      ],
      "properties": {
        "contest_bet_summary": {
          "$ref": "#/definitions/ContestBetSummary"
        },
        "contest_info": {
          "$ref": "#/definitions/ContestInfo"
        },
        "contest_winner": {
          "$ref": "#/definitions/ContestOutcome"
        }
      }
    },
    "ContestsQueryResponse": {
      "type": "object",
      "required": [
        "contest_query_responses"
      ],
      "properties": {
        "contest_query_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContestQueryResponse"
          }
        }
      }
    },
    "OptionBetSummary": {
      "type": "object",
      "required": [
        "bet_allocation",
        "option"
      ],
      "properties": {
        "bet_allocation": {
          "$ref": "#/definitions/Uint128"
        },
        "option": {
          "$ref": "#/definitions/ContestOutcome"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UserBetQueryResponse": {
      "type": "object",
      "required": [
        "bet"
      ],
      "properties": {
        "bet": {
          "$ref": "#/definitions/Bet"
        }
      }
    }
  }
}
