{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteResponse",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_contest"
      ],
      "properties": {
        "create_contest": {
          "$ref": "#/definitions/CreateContestResponse"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "$ref": "#/definitions/ClaimResponse"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bet"
      ],
      "properties": {
        "bet": {
          "$ref": "#/definitions/BetResonse"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BetResonse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/ResponseStatus"
        }
      }
    },
    "ClaimResponse": {
      "type": "object",
      "required": [
        "amount",
        "status"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "status": {
          "$ref": "#/definitions/ResponseStatus"
        }
      }
    },
    "CreateContestResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/ResponseStatus"
        }
      }
    },
    "ResponseStatus": {
      "type": "string",
      "enum": [
        "success",
        "failure"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
